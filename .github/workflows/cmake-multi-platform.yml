name: CMake with GLFW on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Download GLFW
      run: |
        git clone --branch 3.3.9 --depth 1 --recursive https://github.com/glfw/glfw.git
        mv glfw glfw-3.3.9

      working-directory: ${{ github.workspace }}

    - name: Install libxrandr-dev on Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
          sudo apt-get update
          sudo apt-get install libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev
          
    - name: Set up CMake
      if: matrix.os == 'windows-latest'
      run: |
            $version = '3.28.1'
            $url = "https://cmake.org/files/v$version/cmake-$version-win64-x64.msi"

            Invoke-WebRequest -Uri $url -OutFile cmake_installer.msi

            Start-Process -Wait -FilePath msiexec -ArgumentList "/i", "cmake_installer.msi", "/quiet", "/qn"
            
    - name: Configure CMake with GLFW
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

  create-release:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: |
          build/  # Replace with your actual path
        asset-name: RGE
        tag_name: v0.0.1  # You can set your desired version number
        release_name: Release v0.0.1

    - name: Publish Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/   # Replace with your actual path
        asset_name: RGE
        asset_content_type: application/octet-stream
